#!/bin/bash
CONFIG_INIFILE=/etc/falias.ini

# Checks that a file exists
# Param 1 : file to check
# Param 2 : error code to exit with, empty if no exit wanted
check_file_exists() {
	if [ ! -f "$1" ]; then
		error "File '$1' does not exist or is not readable"
		exit 1
	fi
}

# Displays an error on stderr
error() {
	echo -n "$bold[ERROR] $normal"
	echo "$1" 1>&2
}

# Requires a minumum number of arguments
# Param 1 : actual number of arguments
# Param 2 : expected minimal number of arguments
require_num_args() {
	nb_parameters=$1
	expected=$2
	if [ $nb_parameters -lt $expected ]; then
		error "Please provide at least $2 parameters"
		usage
		exit 1
	fi	
}

# Displays usage info
usage() {
	cat << EOF
USAGE

falias aliasname 
	Opens the file corresponding to 'aliasname' in the default editor, 
        defined as the first found of : EDITOR env variable, xdg-open, /usr/bin/editor, vim

falias list
	Lists all aliases
	
falias add aliasname filepath
	Adds an alias named 'aliasname' corresponding to 'filepath'
	
falias edit|update aliasname newFilepath
	Updates the file corresponding to alias 'aliasname'
	
falias remove|delete aliasname
	Removes alias 'aliasname'
	
falias flush
	Removes all aliases (asks for confirmation)
	
NOTES
-> Relative file paths are converted to absolute ones
-> Two aliases with the same name can not be created
EOF
}

# checks that the main config file is writeable
check_config_file_writeable() {
	if [ ! -w $CONFIG_INIFILE ]; then
		error "The main config file '$CONFIG_INIFILE' must be writeable"
		exit 1	
	fi
}

# check that the main config file exists : if not, try to create it
if [ ! -f $CONFIG_INIFILE ]; then
	echo "Main config file '$CONFIG_INIFILE' not found, trying to create it... "
	touch $CONFIG_INIFILE 2>/dev/null 1>&2
	if [ $? -ne 0 ]; then
		error "Could not create '$CONFIG_INIFILE'. Check you have the right permissions"
		exit 1
	else
		echo "done"
	fi
fi


require_num_args $# 1
cmd="$1"
bold=`tput bold`
normal=`tput sgr0`

if [ $cmd = "list" ]; then
	sed -e 's/^/Alias /g' -e 's/=/ <--> /g' $CONFIG_INIFILE
	
elif [ $cmd = "add" ]; then
	check_config_file_writeable
	require_num_args $# 3
	
	alias="$2"
	file=`readlink -e "$3"` # get full file path
	check_file_exists "$3"
	
	# check that alias does not already exists
	result=`cat $CONFIG_INIFILE | grep "$alias=" | cut -d "=" -f2`
	if [ ! -z $result ]; then
		error "Alias '$alias' already exists"
		exit 1
	fi

	echo "Adding alias '$2 <--> $3'"
	echo "$alias=$file" >> $CONFIG_INIFILE
	
elif [ $cmd = "edit" ] || [ $cmd = "update" ]; then
	check_config_file_writeable
	require_num_args $# 3
	alias="$2"
	new_file=`readlink -e "$3"` # get full file path

	check_file_exists "$3"

	echo "Updating file of alias '$alias' to '$new_file'"
	
	sum_exit_codes=0
	$0 remove "$alias" 1>/dev/null 2>&1
	sum_exit_codes=$(($sum_exit_codes+$?))
	$0 add "$alias" "$new_file" 1>/dev/null 2>&1
	sum_exit_codes=$(($sum_exit_codes+$?))
	
	if [ $sum_exit_codes != 0 ]; then
		error "Unable to update alias '$alias'"
		error "sum was $sum_exit_codes"
		exit 1
	else
		echo "done"
	fi

elif [ $cmd = "remove" ] || [ $cmd = "delete" ]; then
	check_config_file_writeable
	require_num_args $# 2
	alias="$2"
	echo "Removing alias '$alias'"
	sed -i -e "/$alias=.*/d" $CONFIG_INIFILE
	
	if [ $? -ne 0 ]; then
		error "Unable to remove alias '$alias'"
		exit 1
	else
		echo "done"
	fi
	
elif [ $cmd = "flush" ]; then
	check_config_file_writeable
	echo -n "Are you sure you want to flush all aliases? (actual files will *NOT* be impacted) ? (y/n) "
	read ans
	case "$ans" in
		y|Y|[Yy][Ee][Ss])
			echo -n "" > $CONFIG_INIFILE
		;;
		*) echo "Aborting" ;;
	esac
else
	# Not a valid command, we assume the user wants to edit a file
	alias="$cmd"
	file=`cat $CONFIG_INIFILE | grep "$alias=" | cut -d "=" -f2`
	if [ -z "$file" ]; then
		error "Alias '$alias' does not exist"
		exit 1
	fi

	# File will now open in :
	#	-> default editor specified in environment variable $EDITOR if it exists
	#	-> or default graphic editor determined by the command xdg-open if it exists and is runnable
	#	-> or default commandline editor if /usr/bin/editor exists and is runnable
	#	-> or vim otherwise
	
	if [ ! -z $EDITOR ]; then
		if [ -f $EDITOR ] && [ -x $EDITOR ]; then
			$EDITOR "$file"
			exit 0;
		elif [ -x `which $EDITOR` ]; then
			`which $EDITOR` "$file"
			exit 0;
		fi
	fi
	
	test_xdgopen=`which xdg-open`
	
	if [ ! -z $test_xdgopen ] && [ -x $test_xdgopen ]; then
		xdg-open "$file" 2>/dev/null 1>&2 &
		exit 0;
	fi
	
	editor="/usr/bin/editor"
	if [ ! -f $editor ] || [ ! -x $editor ]; then
		editor=`which vi`
	fi
	$editor "$file"
	exit 0
fi	
